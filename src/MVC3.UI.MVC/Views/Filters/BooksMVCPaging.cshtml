@*@model IEnumerable<MVC3.DATA.EF.Book>*@
<!--updating with paged list and using below-->
@model PagedList.IPagedList<MVC3.DATA.EF.Book>
@using PagedList.Mvc;

@{
    ViewBag.Title = "BooksMVCPaging";
}

<h2>BooksMVCPaging</h2>

<!--search form with using Html.BeginForm-->
@using (Html.BeginForm("BooksMVCPaging", "Filters", FormMethod.Get))
{
    <p class="pull-right text-right">
        <!--set textbox for search, but also track the last aka current search term applied (tracked with viewbag-->
        @*signature: ("Name", "Current Value", htmlAttributers)*@
        @Html.TextBox("searchString", ViewBag.CurrentFilter as string, new { placeholder = "Search Title" })
        <input type="submit" value="Search" class="btn btn-primary" />
    </p>
}




@*< !--Adding pager code wherever we want it to show on the pages-->*@
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

<!--toggle disclaimer for no results-->
@if (Model.Count == 0)
{
    <p class="alert alert-warning">
        No results meet your criteria
    </p>
}
else
{




    @Html.PagedListPager(Model, page => Url.Action("BooksMVCPaging", new { page, currentFilter = ViewBag.CurrentFilter }))
    <table class="table">
        <tr>
            <th>
                @*@Html.DisplayNameFor(model => model.ISBN)*@
                @Html.DisplayNameFor(model => model.FirstOrDefault().ISBN)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().BookTitle)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().UnitsSold)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().PublishDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().BookStatus.BookStatusName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().Genre.GenreName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().Publisher.PublisherName)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.ISBN)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BookTitle)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Price)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UnitsSold)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PublishDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BookStatus.BookStatusName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Genre.GenreName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Publisher.PublisherName)
                </td>
            </tr>
        }

    </table>
}
